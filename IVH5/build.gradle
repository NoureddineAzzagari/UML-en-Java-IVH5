apply plugin: "jacoco"
apply plugin: "sonar-runner"

// Change this path to your local webserver setting.
def webserverDir = 'c:/dev/xampp/htdocs/classes'
	
subprojects {
	apply plugin: "java"
	apply plugin: "eclipse"

    version = '1.0'			// version will be postfixed to jar-name
    group = 'edu.avans'		// used in gradle publish

	repositories {
        mavenCentral()
		flatDir {
			name "webserver"
			dirs webserverDir
		}
	}

	// Dependencies and artifacts are grouped by configurations.
	configurations { 
		runtime
	}

	uploadArchives {
		repositories {
			add project.repositories.webserver
		}
	}
}

project(':api') {
	description = "The interface descriptions."
	
	// Default name for .jar is projectname-version.jar; change it here.
	archivesBaseName = "library-api"

    dependencies {
        compile project(':shared')
    }
}

project(':server') {
    description = "The server implementation."
	
	// Default name for .jar is projectname-version.jar; change it here.
	archivesBaseName = "library-server"
	
    dependencies {
        compile project(':shared'), project(':api'), 'mysql:mysql-connector-java:5.1.33', 'log4j:log4j:1+'
        testCompile "junit:junit:4.11"
    }

	def webdir = project.file(new File(webserverDir), PathValidation.DIRECTORY)

	//
	// deploylocal plaatst alle gerefereerde libraries in /server/build/deploy.
	// Deze kunnen vervolgens met gradle uploadArchives naar de webserver 
	// ge-upload worden. deploylocal wordt (automatisch) aangeroepen na build.
	//
	task deploylocal(type: Copy) {
		from('resources') {
			include '**/*.xml', '**/*.xsd'
			include '**/*.logconfig', '**/*.properties', '**/*.policy'
			into 'resources'
		}
		from ('../client/resources/client.policy'){
			into 'resources'
		}
		from (configurations.runtime) {
			into 'libs'
		}
		from ('build/classes/main') {
			into 'bin'
		}
		from ('../api/build/classes/main') {
			into 'bin'
		}
		from ('../shared/build/classes/main') {
			into 'bin'
		}
		into { webdir }

		dependsOn build
	}
	// Voeg deploylocal toe achteraan de build-task.
	// Na iedere gradle build wordt nu een deploy van de server uitgevoerd.
	build.finalizedBy deploylocal
	
	// Remove all from deployment directory after task 'clean' 
	task removeDeploymentDirs(type: Delete) {
		new File(webserverDir + "/bin/").deleteDir()
		new File(webserverDir + "/resources/").deleteDir()
		new File(webserverDir + "/libs/").deleteDir()
	}
	clean.finalizedBy removeDeploymentDirs
}

project(':client') {
    description = "The client implementation."
	
	// Default name for .jar is projectname-version.jar; change it here.
	archivesBaseName = "library-client"

    dependencies {
        compile project(':shared'), project(':api'), 'log4j:log4j:1+'
        testCompile "junit:junit:4.11"
    }

	// Kopieer de classbestanden en runtime referenties naar build/deploy.
	// We kunnen dan de client vanaf de commandline vanuit die directory starten.
	task deploylocal(type: Copy) {
		from configurations.runtime
		from 'build/classes/main'
		from '../api/build/classes/main'
		from '../shared/build/classes/main'
		into 'build/deploy'
		dependsOn build
	}
	// Voeg deploylocal toe achteraan de build-task.
	// Na iedere gradle build wordt nu een deploy uitgevoerd.
	build.finalizedBy deploylocal
}

project(':shared') {
    description = "The shared domain between client and server."
	
	// Default name for .jar is projectname-version.jar; change it here.
	archivesBaseName = "library-shared"

    dependencies {
        compile 'log4j:log4j:1+'
        testCompile "junit:junit:4.11"
    }
}