apply plugin: "jacoco"
apply plugin: "sonar-runner"

subprojects {
	apply plugin: "java"
	apply plugin: "eclipse"
    apply plugin: 'ivy-publish'

    version = '1.0'			// version will be postfixed to jar-name
    group = 'nl.avans.aei'	// used in gradle publish
	
	repositories {
        mavenCentral()
		flatDir {
			name "webserver"
			// Change this path to your local webserver setting.
			dirs 'c:/dev/xampp/htdocs/classes'
		}
	}

	// Dependencies and artifacts are grouped by configurations.
	configurations { 
		runtime
	}

	uploadArchives {
		repositories {
			add project.repositories.webserver
			/*
			ivy {
				credentials {
					username "username"
					password "pw"
				}
				url "http://repo.mycompany.com"
			}
			*/
		}
	}
}

project(':api') {
	description = "The interface descriptions."
	
	// Default name for .jar is projectname-version.jar; change it here.
	archivesBaseName = "library-api"

    dependencies {
        compile project(':shared')
    }
	
	artifacts {
		// Set the artifacts to be used in uploadArchives.
		// Default the .jar is used.
	}
}

project(':server') {
    description = "The server implementation."
	
	// Default name for .jar is projectname-version.jar; change it here.
	archivesBaseName = "library-server"
	
    dependencies {
        compile project(':shared'), project(':api'), 'mysql:mysql-connector-java:5.1+', 'log4j:log4j:1+'
        testCompile "junit:junit:4.11"
    }
	
	def webdir = project.file(new File('c:/dev/xampp/htdocs/classes'), PathValidation.DIRECTORY)

	//
	// deploylocal plaatst alle gerefereerde libraries in /server/build/deploy.
	// Deze kunnen vervolgens met gradle uploadArchives naar de webserver 
	// ge-upload worden. deploylocal wordt (automatisch) aangeroepen na build.
	//
	task deploylocal(type: Copy) {
		from 'resources/server.policy'
		from('resources') {
			include '**/*.xml'
			include '**/*.xsd'
			into 'resources'
		}
		from 'serverlog.cnf'
		from configurations.runtime		
		from 'build/classes/main'
		from '../api/build/classes/main'
		from '../shared/build/classes/main'
		into { webdir }

		dependsOn build
	}
	// Voeg deploylocal toe achteraan de build-task.
	// Na iedere gradle build wordt nu een deploy van de server uitgevoerd.
	build.finalizedBy deploylocal
	
	//associating the task that produces the artifact with the configuration
	artifacts {
		archives file('build/deploy/mysql-connector-java-5.1.31.jar')
		archives file('build/deploy/log4j-1.2.17.jar')
		archives file('build/deploy/serverlog.cnf')
		archives file('build/deploy/server.policy')
	}
	
}

project(':client') {
    description = "The client implementation."
	
	// Default name for .jar is projectname-version.jar; change it here.
	archivesBaseName = "library-client"

    dependencies {
        compile project(':shared'), project(':api'), 'log4j:log4j:1+'
        testCompile "junit:junit:4.11"
    }

	// Kopieer de classbestanden en runtime referenties naar build/deploy.
	// We kunnen dan de client vanaf de commandline vanuit die directory starten.
	task deploylocal(type: Copy) {
		from configurations.runtime
		from 'build/classes/main'
		from '../api/build/classes/main'
		from '../shared/build/classes/main'
		into 'build/deploy'
		dependsOn build
	}
	// Voeg deploylocal toe achteraan de build-task.
	// Na iedere gradle build wordt nu een deploy uitgevoerd.
	build.finalizedBy deploylocal
}

project(':shared') {
    description = "The shared domain between client and server."
	
	// Default name for .jar is projectname-version.jar; change it here.
	archivesBaseName = "library-shared"

    dependencies {
        testCompile "junit:junit:4.11"
    }

	artifacts {
		// Set the artifacts to be used in uploadArchives.
		// Default the .jar is used.
	}
}

subprojects {
	// Via gradle publish publiceer je de artifacts met ivy.
    publishing {
        repositories {
			// add project.repositories.fileRepo
            ivy {
                url "${rootProject.buildDir}/repo" // change to point to your repo, e.g. http://my.org/repo
            }
        }
        publications {
            ivy(IvyPublication) {
                from components.java
                // artifact(sourceJar) {
                //    type "source"
                //    conf "runtime"
                // }
                // descriptor.withXml {
                //    asNode().info[0].appendNode('description', description)
                // }
            }
        }
    }
}
